%Author:LSQ
%Date:2018/12
%Description:This program is for Beidou B1C satellite signal acquisition.
%Parameters: 
%          Sampling rate: 12.4MHz
%          Channel 1: Beidou B3
%          Channel 2: GPS L1
%          Sampling depth: 131072

clc;
close all;

%data_in_11 = AD1_IN_IBUF90(1:end);   %Channel 1
%data_in_22 = AD2_IN_IBUF90(1:end);   %Channel 2

data_in_1 = csvread('tianxian_14pm47_12.csv',1,3,[1 3 131072 3]);%Channel 1
data_in_2 = csvread('tianxian_14pm47_12.csv',1,4,[1 4 131072 4]);%Channel 2
%data_in_1 = csvread('L1_-40_62.csv',1,3,[1 3 8192 3]);%Channel 2

len = length(data_in_2);
freq = (1:len)./len * 12.4;

figure(1)
plot(data_in_2);

fft_data_squ = abs(fft(data_in_2)).^2;
fft_data_log = 10*log10(fft_data_squ);

figure(2)
plot(freq,fft_data_log);   %带通采样，中频频点为9.22MHz和3.18MHz，带宽为4.092MHz

%由于采样率为12.4MHz，所以仅对导频信号的BOC(1,1)信号成分进行捕获
f_sample = 12.4e6;             %采样频率

%%产生10ms的本地导频信号
%基本参数
f_sc_a = 1.023e6 ;                 %BOC(1,1)子载波速率
f_sc_b = 6*1.023e6 ;               %BOC(6,1)子载波速率
Rc = 1.023e6;                      %主码码速率
T_process = 10e-3;                 %处理时间
T_int = 5e-3;                      %相关运算时间
t = 0 : 1/f_sample : T_process - 1/f_sample;
n = 0:length(t)-1;                 
j=sqrt(-1);
pi = 3.141592654;                  %圆周率
Num_int = floor(f_sample * T_int); %相干积分时间所对应的采样点数
IF = 3.18e6;            %[Hz]
FdSearchStep = 40;      %[Hz]
DopplerRange = 5000;      %[Hz]
code_sample = floor(f_sample/Rc);   %单个码片所对应的采样数
FdVect= -DopplerRange:FdSearchStep:DopplerRange;     %多普勒频移搜索范围

SigIN1 = data_in_2(1 : 5*12.4e3);    %将卫星数据截短为5ms
%SigIN = data_in_2(7073 : 131072);    %将卫星数据截短为10ms
SigIN2 = data_in_2(5*12.4e3+1 : 10*12.4e3);    %将卫星数据截短为5ms

%SigIN = SigIN';
SigIN1 = SigIN1';
SigIN2 = SigIN2';

%产生本地导频伪码主码
for prn_num = 1:63
   prn_p = generatecode(prn_num);
   index_code = mod(floor(Rc*t),10230)+1;
   prn_local = prn_p(index_code);

%本地的BOC(1,1)
   Sboc = prn_local.*sign(sin(2*pi*f_sc_a*t));

  %生成矩阵用于存相关结果
  C = zeros(length(FdVect),f_sample*T_process*2-1);
  C_temp = zeros(length(FdVect),f_sample*T_process*2-1);
  C_temp2 = zeros(length(FdVect),f_sample*T_process*2-1);
   idx = 1;     %矩阵行数
   idx2 = 1;
   
   for ind_FD= 1:length(FdVect)
       %corr_temp = zeros(1,Num_int) ;
       fd_ind = FdVect(ind_FD);
       %本地载波
       m = 1:Num_int;
       carrI = cos(2*pi*(IF+fd_ind)*m/f_sample);
       carrQ = sin(2*pi*(IF+fd_ind)*m/f_sample);
       %下变频
       SigOUTI = SigIN1 .* carrI;
       SigOUTQ = SigIN1 .* carrQ;
       
       SigOUT = SigOUTI + SigOUTQ;
       %相关函数
       R = xcorr(Sboc, SigOUT,'none');
      
       corr_temp =abs(R);

       C_temp(idx,:) = corr_temp;     
       idx = idx + 1;
   end

    [value1, ind_mixf1] = max(max(C_temp'));
    [value2, ind_mixc1] = max(max(C_temp)); 
   
    for ind_FD2= 1:length(FdVect)
       %corr_temp = zeros(1,Num_int) ;
       fd_ind2 = FdVect(ind_FD2);
       %本地载波
       m = 1:Num_int;
       carrI2 = cos(2*pi*(IF+fd_ind2)*m/f_sample);
       carrQ2 = sin(2*pi*(IF+fd_ind2)*m/f_sample);
       %下变频
       SigOUTI2 = SigIN2 .* carrI2;
       SigOUTQ2 = SigIN2 .* carrQ2;
       
       %本地码
       S1_qmboc11 = s1_qmboc11(1:floor(f_sample * T_process));
       S12_qmboc11 = s12_qmboc11(1:floor(f_sample * T_process));
       
       SigOUT2 = SigOUTI2 + SigOUTQ2;

       %重构相关函数
       R_E_11_2 = xcorr(S1_qmboc11, SigOUT2,'none');
       R_L_11_2 = xcorr(S12_qmboc11, SigOUT2,'none');

       R_EL_11_2 = R_E_11_2 + R_L_11_2;
       
       corr_temp2 =abs(R_E_11_2) + abs(R_L_11_2) - abs(R_EL_11_2);
       
       %C(idx,:) = corr_temp;
       C_temp2(idx2,:) = corr_temp2;     
       idx2 = idx2 + 1;
   end
   [value3, ind_mixf2] = max(max(C_temp2'));
   [value4, ind_mixc2] = max(max(C_temp2)); 
   
   if C_temp(ind_mixf1,ind_mixc1) > C_temp2(ind_mixf2,ind_mixc2)
       code_phase = (ind_mixc1-f_sample*T_process)/code_sample;
       doppler =(ind_mixf1-1)*FdSearchStep - DopplerRange;   %[HZ]
       C = C_temp;
   else
       code_phase = (ind_mixc2-f_sample*T_process)/code_sample;
       doppler =(ind_mixf2-1)*FdSearchStep - DopplerRange;   %[HZ]
       C = C_temp2;
   end
    
   [value, ind_mixf] = max(max(C'));
   [value, ind_mixc] = max(max(C)); 
   
   %code_phase = (Num_int-ind_mixc)/code_sample;
   %doppler =(ind_mixf-1)*FdSearchStep - DopplerRange;   %[HZ]
   
   %自适应捕获检测判决
% Num_code = 12;                %被检测码片单元周围的参考码片单元数目
% ThresholdFactor = 9.34;      %虚警率为10e-6的门限比例因子
% Z = 0;                        %功率估计值
% for i=1:6
%     Z = Z + C(ind_mixf,ind_mixc+i*code_sample)+C(ind_mixf,ind_mixc-i*code_sample);    
% end
% Z_aver = Z/Num_code;
% 
% %Threshold = ThresholdFactor*Z_aver;    %得到自适应门限值
% Threshold = 90000;

% if C(ind_mixf,ind_mixc) > Threshold
%     data = sprintf('The acquisition result\n Code phase:%f 码片\nDoppler frequency:%f Hz\nValue:%f \n',...
%         code_phase,doppler,C(ind_mixf,ind_mixc));
%     data_prn = sprintf('The satellite number is %d.\n',prn_num);
%     disp(data);
%     disp(data_prn);
% else
%     data = sprintf('Acquisition failed!\n');
%     data_prn = sprintf('Value:%f \nThe satellite number is %d.\n',C(ind_mixf,ind_mixc),prn_num);
%     disp(data);
%     disp(data_prn);
% end
     data = sprintf('The acquisition result\n Code phase:%f 码片\nDoppler frequency:%f Hz\nValue:%f \n',...
        code_phase,doppler,C(ind_mixf,ind_mixc));
    data_prn = sprintf('The satellite number is %d.\n',prn_num);
    disp(data);
    disp(data_prn);
  
 end

%画三维图
% x1 = Num_int-2046*code_sample;
% x2 = Num_int;
% y1 = (-2000+DopplerRange)/FdSearchStep+1;
% y2 = (2000+DopplerRange)/FdSearchStep+1;
% C_part=C(y1:y2,x1:x2);
% [C_y, C_x]=size(C);    %C_x为码相位，C_y为多普勒频移
% X=1:C_x;Y=1:C_y;       %X为码相位，Y为多普勒频移
% [x,y]=meshgrid(X,Y);
%figure(3)
%mesh((Num_int-x)/code_sample,(y-1)*FdSearchStep - DopplerRange,C);  %坐标变换
%mesh((x2-x1-x)/code_sample,(y+y1-2)*FdSearchStep - DopplerRange,C_part);  %缩小显示范围
%view(0,0);                        %二维视角
% hold on
% plot3(code_phase,doppler,value,'k.','markersize',20);     %小黑点标记
% text(code_phase,doppler,value,['X:',num2str(code_phase,4),char(10), ...
%     'Y:',num2str(doppler,4),char(10),'Z:',num2str(value),char(10)]);  %标值
%xlabel('码相位/码');ylabel('多普勒频移/Hz');zlabel('相关值');
%axis([0 10230 -5000 5000 0 value+1e4]);
%title('北斗B1C信号捕获结果');
